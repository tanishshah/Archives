library IEEE;
use IEEE.std_logic_1164.all;
 
entity testbench is
-- empty
end testbench; 

architecture tb of testbench is

component gtComparator is
port(
     a0 : in std_logic;
     a1 : in std_logic;
     a2: in std_logic;
     b0 : in std_logic;
     b1 : in  std_logic;
     b2 : in std_logic;
     z : out std_logic
);
end component;

signal A0, A1, A2, B0, B1, B2, Z: std_logic;

begin

  DUT: gtComparator port map(A0, A1, A2, B0, B1, B2, Z);

  process
  begin    
	
    -- some fails
    A0 <= '0';
    A1 <= '0';
    A2 <= '0';
    B0 <='0';
    B1 <='0';
    B2 <= '0';
    wait for 1 ns;
    assert(Z='0') severity error;
    
    A0 <= '1';
    A1 <= '1';
    A2 <= '1';
    B0 <='1';
    B1 <='1';
    B2 <= '1';
    wait for 1 ns;
    assert(Z='0') severity error;

    A0 <= '1';
    A1 <= '0';
    A2 <= '1';
    B0 <='1';
    B1 <='1';
    B2 <= '1';
    wait for 1 ns;
    assert(Z='0') severity error;
    
    A0 <= '1';
    A1 <= '1';
    A2 <= '0';
    B0 <='1';
    B1 <='1';
    B2 <= '1';
    wait for 1 ns;
    assert(Z='0') severity error;
    
    A0 <= '1';
    A1 <= '0';
    A2 <= '0';
    B0 <='0';
    B1 <='0';
    B2 <= '1';
    wait for 1 ns;
    assert(Z='0') severity error;
    
    --some trues
    A0 <= '1';
    A1 <= '1';
    A2 <= '1';
    B0 <='0';
    B1 <='1';
    B2 <= '1';
    wait for 1 ns;
    assert(Z='1') severity error;
    
    A0 <= '1';
    A1 <= '1';
    A2 <= '1';
    B0 <='1';
    B1 <='0';
    B2 <= '1';
    wait for 1 ns;
    assert(Z='1') severity error;
    
    A0 <= '0';
    A1 <= '0';
    A2 <= '1';
    B0 <='1';
    B1 <='1';
    B2 <= '0';
    wait for 1 ns;
    assert(Z='1') severity error;
    
    A0 <= '1';
    A1 <= '0';
    A2 <= '0';
    B0 <='0';
    B1 <='0';
    B2 <= '0';
    wait for 1 ns;
    assert(Z='1') severity error;
    
    A0 <= '1';
    A1 <= '0';
    A2 <= '1';
    B0 <='0';
    B1 <='0';
    B2 <= '1';
    wait for 1 ns;
    assert(Z='1') severity error;
  
    A0 <= '0';
    A1 <= '0';
    A2 <= '0';
    B0 <= '0';
    B1 <= '0';
    b2 <= '0';
    
    wait;
  end process;
end tb;