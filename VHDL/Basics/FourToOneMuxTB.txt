library IEEE;
use IEEE.std_logic_1164.all;
 
entity testbench is
-- empty
end testbench; 

architecture tb of testbench is

component fourToOneMux is
port(
     c0 : in std_logic;
     c1 : in std_logic;
     c2: in std_logic;
     c3 : in std_logic;
     s0 : in  std_logic;
     s1 : in std_logic;
     z : out std_logic
);
end component;

signal a0, a1, a2, a3, b0, b1, y: std_logic;

begin

  DUT: fourToOneMux port map(a0,a1,a2,a3,b0,b1,y);

  process
  begin    
	
    --select a0
    a0 <= '1';
    a1 <= '0';
    a2 <= '0';
    a3 <='0';
    b0 <='0';
    b1 <= '0';
    wait for 1 ns;
    assert(y='1') severity error;
    
    	
    a0 <= '0';
    a1 <= '1';
    a2 <= '1';
    a3 <='1';
    b0 <='0';
    b1 <= '0';
    wait for 1 ns;
    assert(y='0') severity error;
    
    --select a1
    a0 <= '0';
    a1 <= '1';
    a2 <= '0';
    a3 <='0';
    b0 <='0';
    b1 <= '1';
    wait for 1 ns;
    assert(y='1') severity error;
    
    a0 <= '1';
    a1 <= '0';
    a2 <= '1';
    a3 <='1';
    b0 <='1';
    b1 <= '0';
    wait for 1 ns;
    assert(y='0') severity error;
    
    --select a2
    a0 <= '0';
    a1 <= '0';
    a2 <= '1';
    a3 <='0';
    b0 <='1';
    b1 <= '0';
    wait for 1 ns;
    assert(y='1') severity error;
    
    a0 <= '1';
    a1 <= '1';
    a2 <= '0';
    a3 <='1';
    b0 <='0';
    b1 <= '1';
    wait for 1 ns;
    assert(y='0') severity error;
    
    --select a3
    a0 <= '0';
    a1 <= '0';
    a2 <= '0';
    a3 <='1';
    b0 <='1';
    b1 <= '1';
    wait for 1 ns;
    assert(y='1') severity error;
    
    a0 <= '1';
    a1 <= '1';
    a2 <= '1';
    a3 <='0';
    b0 <='1';
    b1 <= '1';
    wait for 1 ns;
    assert(y='0') severity error;
  
  
    a0 <= '0';
    a1 <= '0';
    a2 <= '0';
    a3 <= '0';
    b0 <= '0';
    b1 <= '0';
    
    wait;
  end process;
end tb;